/*
 * Konnect Control Planes
 *
 * The API for Kong Konnect Control Planes.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_control_plane`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateControlPlaneError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status409(models::ConflictError),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_control_plane`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteControlPlaneError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_control_plane`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetControlPlaneError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::BaseError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_control_planes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListControlPlanesError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status500(models::BaseError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_control_plane`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateControlPlaneError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::InternalServerError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}


/// Create a control plane in the Konnect Organization.
pub async fn create_control_plane(configuration: &configuration::Configuration, create_control_plane_request: models::CreateControlPlaneRequest) -> Result<models::ControlPlane, Error<CreateControlPlaneError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_create_control_plane_request = create_control_plane_request;

    let uri_str = format!("{}/control-planes", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_create_control_plane_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ControlPlane`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ControlPlane`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateControlPlaneError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete an individual control plane.
pub async fn delete_control_plane(configuration: &configuration::Configuration, id: &str) -> Result<(), Error<DeleteControlPlaneError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/control-planes/{id}", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteControlPlaneError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns information about an individual control plane.
pub async fn get_control_plane(configuration: &configuration::Configuration, id: &str) -> Result<models::ControlPlane, Error<GetControlPlaneError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/control-planes/{id}", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ControlPlane`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ControlPlane`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetControlPlaneError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns an array of control plane objects containing information about the Konnect Control Planes.
pub async fn list_control_planes(configuration: &configuration::Configuration, page_left_square_bracket_size_right_square_bracket: Option<i32>, page_left_square_bracket_number_right_square_bracket: Option<i32>, filter: Option<models::ControlPlaneFilterParameters>, labels: Option<&str>, sort: Option<&str>) -> Result<models::ListControlPlanesResponse, Error<ListControlPlanesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_page_left_square_bracket_size_right_square_bracket = page_left_square_bracket_size_right_square_bracket;
    let p_page_left_square_bracket_number_right_square_bracket = page_left_square_bracket_number_right_square_bracket;
    let p_filter = filter;
    let p_labels = labels;
    let p_sort = sort;

    let uri_str = format!("{}/control-planes", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_left_square_bracket_size_right_square_bracket {
        req_builder = req_builder.query(&[("page[size]", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_left_square_bracket_number_right_square_bracket {
        req_builder = req_builder.query(&[("page[number]", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_filter {
        let json_value = serde_json::to_value(param_value).expect("Failed to serialize to JSON");
        let params = crate::apis::parse_deep_object("filter", &json_value);
        req_builder = req_builder.query(&params);
    }
    if let Some(ref param_value) = p_labels {
        req_builder = req_builder.query(&[("labels", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    println!("{req:#?}");
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListControlPlanesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListControlPlanesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListControlPlanesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update an individual control plane.
pub async fn update_control_plane(configuration: &configuration::Configuration, id: &str, update_control_plane_request: models::UpdateControlPlaneRequest) -> Result<models::ControlPlane, Error<UpdateControlPlaneError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_update_control_plane_request = update_control_plane_request;

    let uri_str = format!("{}/control-planes/{id}", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_control_plane_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ControlPlane`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ControlPlane`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateControlPlaneError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

