/*
 * Konnect Control Planes
 *
 * The API for Kong Konnect Control Planes.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_control_planes_id_group_member_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetControlPlanesIdGroupMemberStatusError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::BaseError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_control_planes_id_group_memberships`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetControlPlanesIdGroupMembershipsError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::BaseError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_control_planes_id_group_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetControlPlanesIdGroupStatusError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::BaseError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_control_planes_id_group_memberships_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostControlPlanesIdGroupMembershipsAddError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::BaseError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_control_planes_id_group_memberships_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostControlPlanesIdGroupMembershipsRemoveError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::BaseError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_control_planes_id_group_memberships`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutControlPlanesIdGroupMembershipsError {
    Status400(models::BadRequestError),
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    Status404(models::NotFoundError),
    Status500(models::BaseError),
    Status503(models::ServiceUnavailableError),
    UnknownValue(serde_json::Value),
}


/// Determines the group membership status of a control plane.
pub async fn get_control_planes_id_group_member_status(configuration: &configuration::Configuration, id: &str) -> Result<models::GroupMemberStatus, Error<GetControlPlanesIdGroupMemberStatusError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/control-planes/{id}/group-member-status", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GroupMemberStatus`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GroupMemberStatus`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetControlPlanesIdGroupMemberStatusError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns an array of control planes that are a member of this control plane group.
pub async fn get_control_planes_id_group_memberships(configuration: &configuration::Configuration, id: &str, page_left_square_bracket_size_right_square_bracket: Option<i32>, page_left_square_bracket_after_right_square_bracket: Option<&str>) -> Result<models::GetControlPlanesIdGroupMemberships200Response, Error<GetControlPlanesIdGroupMembershipsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_page_left_square_bracket_size_right_square_bracket = page_left_square_bracket_size_right_square_bracket;
    let p_page_left_square_bracket_after_right_square_bracket = page_left_square_bracket_after_right_square_bracket;

    let uri_str = format!("{}/control-planes/{id}/group-memberships", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page_left_square_bracket_size_right_square_bracket {
        req_builder = req_builder.query(&[("page[size]", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_left_square_bracket_after_right_square_bracket {
        req_builder = req_builder.query(&[("page[after]", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetControlPlanesIdGroupMemberships200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetControlPlanesIdGroupMemberships200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetControlPlanesIdGroupMembershipsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns the status of a control plane group, including existing conflicts.
pub async fn get_control_planes_id_group_status(configuration: &configuration::Configuration, id: &str) -> Result<models::GetControlPlanesIdGroupStatus200Response, Error<GetControlPlanesIdGroupStatusError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/control-planes/{id}/group-status", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetControlPlanesIdGroupStatus200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetControlPlanesIdGroupStatus200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetControlPlanesIdGroupStatusError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds one or more control planes as a member of a control plane group.
pub async fn post_control_planes_id_group_memberships_add(configuration: &configuration::Configuration, id: &str, group_membership: Option<models::GroupMembership>) -> Result<(), Error<PostControlPlanesIdGroupMembershipsAddError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_group_membership = group_membership;

    let uri_str = format!("{}/control-planes/{id}/group-memberships/add", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_group_membership);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PostControlPlanesIdGroupMembershipsAddError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes one or more control planes from the members of a control plane group.
pub async fn post_control_planes_id_group_memberships_remove(configuration: &configuration::Configuration, id: &str, group_membership: Option<models::GroupMembership>) -> Result<(), Error<PostControlPlanesIdGroupMembershipsRemoveError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_group_membership = group_membership;

    let uri_str = format!("{}/control-planes/{id}/group-memberships/remove", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_group_membership);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PostControlPlanesIdGroupMembershipsRemoveError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds one or more control planes as a member of a control plane group.
pub async fn put_control_planes_id_group_memberships(configuration: &configuration::Configuration, id: &str, group_membership: Option<models::GroupMembership>) -> Result<(), Error<PutControlPlanesIdGroupMembershipsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_group_membership = group_membership;

    let uri_str = format!("{}/control-planes/{id}/group-memberships", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_group_membership);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PutControlPlanesIdGroupMembershipsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

