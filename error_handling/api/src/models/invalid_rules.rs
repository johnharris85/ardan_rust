/*
 * Konnect Control Planes
 *
 * The API for Kong Konnect Control Planes.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InvalidRules : invalid parameters rules
/// invalid parameters rules
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvalidRules {
    #[serde(rename = "required")]
    Required,
    #[serde(rename = "is_array")]
    IsArray,
    #[serde(rename = "is_base64")]
    IsBase64,
    #[serde(rename = "is_boolean")]
    IsBoolean,
    #[serde(rename = "is_date_time")]
    IsDateTime,
    #[serde(rename = "is_integer")]
    IsInteger,
    #[serde(rename = "is_null")]
    IsNull,
    #[serde(rename = "is_number")]
    IsNumber,
    #[serde(rename = "is_object")]
    IsObject,
    #[serde(rename = "is_string")]
    IsString,
    #[serde(rename = "is_uuid")]
    IsUuid,
    #[serde(rename = "is_fqdn")]
    IsFqdn,
    #[serde(rename = "is_arn")]
    IsArn,
    #[serde(rename = "unknown_property")]
    UnknownProperty,
    #[serde(rename = "missing_reference")]
    MissingReference,
    #[serde(rename = "is_label")]
    IsLabel,
    #[serde(rename = "matches_regex")]
    MatchesRegex,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "is_supported_network_availability_zone_list")]
    IsSupportedNetworkAvailabilityZoneList,
    #[serde(rename = "is_supported_network_cidr_block")]
    IsSupportedNetworkCidrBlock,
    #[serde(rename = "is_supported_provider_region")]
    IsSupportedProviderRegion,

}

impl std::fmt::Display for InvalidRules {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Required => write!(f, "required"),
            Self::IsArray => write!(f, "is_array"),
            Self::IsBase64 => write!(f, "is_base64"),
            Self::IsBoolean => write!(f, "is_boolean"),
            Self::IsDateTime => write!(f, "is_date_time"),
            Self::IsInteger => write!(f, "is_integer"),
            Self::IsNull => write!(f, "is_null"),
            Self::IsNumber => write!(f, "is_number"),
            Self::IsObject => write!(f, "is_object"),
            Self::IsString => write!(f, "is_string"),
            Self::IsUuid => write!(f, "is_uuid"),
            Self::IsFqdn => write!(f, "is_fqdn"),
            Self::IsArn => write!(f, "is_arn"),
            Self::UnknownProperty => write!(f, "unknown_property"),
            Self::MissingReference => write!(f, "missing_reference"),
            Self::IsLabel => write!(f, "is_label"),
            Self::MatchesRegex => write!(f, "matches_regex"),
            Self::Invalid => write!(f, "invalid"),
            Self::IsSupportedNetworkAvailabilityZoneList => write!(f, "is_supported_network_availability_zone_list"),
            Self::IsSupportedNetworkCidrBlock => write!(f, "is_supported_network_cidr_block"),
            Self::IsSupportedProviderRegion => write!(f, "is_supported_provider_region"),
        }
    }
}

impl Default for InvalidRules {
    fn default() -> InvalidRules {
        Self::Required
    }
}

