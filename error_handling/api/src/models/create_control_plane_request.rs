/*
 * Konnect Control Planes
 *
 * The API for Kong Konnect Control Planes.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateControlPlaneRequest : The request schema for the create control plane request.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateControlPlaneRequest {
    /// The name of the control plane.
    #[serde(rename = "name")]
    pub name: String,
    /// The description of the control plane in Konnect.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The ClusterType value of the cluster associated with the Control Plane.
    #[serde(rename = "cluster_type", skip_serializing_if = "Option::is_none")]
    pub cluster_type: Option<ClusterType>,
    /// The auth type value of the cluster associated with the Runtime Group.
    #[serde(rename = "auth_type", skip_serializing_if = "Option::is_none")]
    pub auth_type: Option<AuthType>,
    /// Whether this control-plane can be used for cloud-gateways.
    #[serde(rename = "cloud_gateway", skip_serializing_if = "Option::is_none")]
    pub cloud_gateway: Option<bool>,
    /// Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
    #[serde(rename = "proxy_urls", skip_serializing_if = "Option::is_none")]
    pub proxy_urls: Option<Vec<models::ProxyUrl>>,
    /// Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters, and cannot start with 'kong', 'konnect', 'mesh', 'kic', or '_'.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
}

impl CreateControlPlaneRequest {
    /// The request schema for the create control plane request.
    pub fn new(name: String) -> CreateControlPlaneRequest {
        CreateControlPlaneRequest {
            name,
            description: None,
            cluster_type: None,
            auth_type: None,
            cloud_gateway: None,
            proxy_urls: None,
            labels: None,
        }
    }
}
/// The ClusterType value of the cluster associated with the Control Plane.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClusterType {
    #[serde(rename = "CLUSTER_TYPE_CONTROL_PLANE")]
    ClusterTypeControlPlane,
    #[serde(rename = "CLUSTER_TYPE_K8S_INGRESS_CONTROLLER")]
    ClusterTypeK8SIngressController,
    #[serde(rename = "CLUSTER_TYPE_CONTROL_PLANE_GROUP")]
    ClusterTypeControlPlaneGroup,
    #[serde(rename = "CLUSTER_TYPE_SERVERLESS")]
    ClusterTypeServerless,
}

impl Default for ClusterType {
    fn default() -> ClusterType {
        Self::ClusterTypeControlPlane
    }
}
/// The auth type value of the cluster associated with the Runtime Group.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthType {
    #[serde(rename = "pinned_client_certs")]
    PinnedClientCerts,
    #[serde(rename = "pki_client_certs")]
    PkiClientCerts,
}

impl Default for AuthType {
    fn default() -> AuthType {
        Self::PinnedClientCerts
    }
}

