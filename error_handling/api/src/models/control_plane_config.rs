/*
 * Konnect Control Planes
 *
 * The API for Kong Konnect Control Planes.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ControlPlaneConfig : CP configuration object for related access endpoints.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ControlPlaneConfig {
    /// Control Plane Endpoint.
    #[serde(rename = "control_plane_endpoint")]
    pub control_plane_endpoint: String,
    /// Telemetry Endpoint.
    #[serde(rename = "telemetry_endpoint")]
    pub telemetry_endpoint: String,
    /// The ClusterType value of the cluster associated with the Control Plane.
    #[serde(rename = "cluster_type")]
    pub cluster_type: ClusterType,
    /// The auth type value of the cluster associated with the Runtime Group.
    #[serde(rename = "auth_type")]
    pub auth_type: AuthType,
    /// Whether the Control Plane can be used for cloud-gateways.
    #[serde(rename = "cloud_gateway")]
    pub cloud_gateway: bool,
    /// Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
    #[serde(rename = "proxy_urls", skip_serializing_if = "Option::is_none")]
    pub proxy_urls: Option<Vec<models::ProxyUrl>>,
}

impl ControlPlaneConfig {
    /// CP configuration object for related access endpoints.
    pub fn new(control_plane_endpoint: String, telemetry_endpoint: String, cluster_type: ClusterType, auth_type: AuthType, cloud_gateway: bool) -> ControlPlaneConfig {
        ControlPlaneConfig {
            control_plane_endpoint,
            telemetry_endpoint,
            cluster_type,
            auth_type,
            cloud_gateway,
            proxy_urls: None,
        }
    }
}
/// The ClusterType value of the cluster associated with the Control Plane.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClusterType {
    #[serde(rename = "CLUSTER_TYPE_CONTROL_PLANE")]
    ClusterTypeControlPlane,
    #[serde(rename = "CLUSTER_TYPE_K8S_INGRESS_CONTROLLER")]
    ClusterTypeK8SIngressController,
    #[serde(rename = "CLUSTER_TYPE_CONTROL_PLANE_GROUP")]
    ClusterTypeControlPlaneGroup,
    #[serde(rename = "CLUSTER_TYPE_SERVERLESS")]
    ClusterTypeServerless,
}

impl Default for ClusterType {
    fn default() -> ClusterType {
        Self::ClusterTypeControlPlane
    }
}
/// The auth type value of the cluster associated with the Runtime Group.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthType {
    #[serde(rename = "pinned_client_certs")]
    PinnedClientCerts,
    #[serde(rename = "pki_client_certs")]
    PkiClientCerts,
}

impl Default for AuthType {
    fn default() -> AuthType {
        Self::PinnedClientCerts
    }
}

